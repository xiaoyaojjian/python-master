[loggers]   
keys=root,api,web

# [logger_xxxx] logger_模块名称, 其中logger_root是必须的，否则报错
# level     级别，级别有DEBUG、INFO、WARNING、ERROR、CRITICAL
# handlers  处理类，可以有多个，用逗号分开
# qualname  logger名称，应用程序通过 logging.getLogger获取。对于不能获取的名称，则记录到root模块。
# propagate 是否继承父类的log信息，0:否 1:是

[logger_root]
level=DEBUG
handlers=root

[logger_api]
handlers=api
qualname=api
propagate=0

[logger_web]
handlers=web
qualname=web
propagate=0

# [handler_xxxx]
# class handler类名
# level 日志级别
# formatter，上面定义的formatter
# args handler初始化函数参数

[handlers]
keys=root,api,web

[handler_root]
class=StreamHandler
level=INFO
formatter=fmt01
args=(sys.stderr,)


[handler_api]
class=handlers.RotatingFileHandler
level=DEBUG
formatter=fmt01
args=('/var/log/api/api.log', 'a', 10*1024*1024, 5)

[handler_web]
class=handlers.RotatingFileHandler
level=DEBUG
formatter=fmt01
args=('/var/log/web/web.log', 'a', 10*1024*1024, 5)

# 日志格式
[formatters]
keys=fmt01

[formatter_fmt01]
format=%(asctime)s %(filename)s-%(funcName)s:[%(lineno)d] %(name)s  %(levelname)s %(message)s
datefmt=%d-%b-%Y %H:%M:%S



###
#def write_log(loggername):
#    work_dir = os.path.dirname(os.path.realpath(__file__))
#    log_conf= os.path.join(work_dir, 'conf/logger.conf')
#    logging.config.fileConfig(log_conf)
#    logger = logging.getLogger(loggername)
#    return logger
